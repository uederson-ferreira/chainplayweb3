// Arquivo: components/bingo/hooks/useBingoActions.ts
"use client";

import { useCallback } from 'react';
import { useWriteContract, useWaitForTransactionReceipt } from 'wagmi';
import { parseEther } from 'viem';
import { useToast } from '@/hooks/use-toast';
import { useBingoState } from './useBingoState';
import { formatErrorMessage } from '../utils/gameHelpers';
import { DEFAULT_ROUND_CONFIG, GAS_CONFIGS } from '../utils/gameConstants';
import { BINGO_ABI } from '@/lib/web3/contracts/abis';
import { CONTRACTS } from '@/lib/web3/config';
import { createPublicClient, http } from 'viem';
import { localChain } from '@/lib/web3/config';

// ========================================
// CONFIGURA√á√ÉO DO CLIENTE
// ========================================
const publicClient = createPublicClient({
  chain: localChain,
  transport: http("http://127.0.0.1:8545"),
});

export function useBingoActions() {
  const { toast } = useToast();
  const gameState = useBingoState();
  const { writeContract, data: hash, isPending, error } = useWriteContract();
  const { isLoading: isConfirming, isSuccess: isConfirmed } = useWaitForTransactionReceipt({ hash });

  // ========================================
  // FUN√á√ÉO CORRIGIDA: handleStartRound
  // ========================================
  const handleStartRound = useCallback(async () => {
    console.log('üöÄ INICIANDO RODADA - ENDERE√áOS ALINHADOS');
    console.log('üìç Endere√ßos (agora iguais):');
    console.log('- Cartela:', CONTRACTS.CARTELA);
    console.log('- Bingo:', CONTRACTS.BINGO);
    
    try {
      // ========================================
      // VALIDA√á√ïES B√ÅSICAS
      // ========================================
      if (!gameState.isConnected) {
        toast({
          title: "‚ùå Carteira n√£o conectada",
          description: "Conecte sua carteira primeiro.",
          variant: "destructive",
        });
        return;
      }

      if (!gameState.isCorrectNetwork) {
        toast({
          title: "‚ùå Rede incorreta", 
          description: "Conecte-se √† rede local (localhost:8545).",
          variant: "destructive",
        });
        return;
      }

      // ========================================
      // TESTE R√ÅPIDO DO CONTRATO ANTES DE CRIAR RODADA
      // ========================================
      console.log('üß™ Testando conectividade com contrato...');
      
      try {
        // Testar fun√ß√£o b√°sica primeiro
        const admin = await publicClient.readContract({
          address: CONTRACTS.BINGO,
          abi: BINGO_ABI,
          functionName: 'admin',
        });
        console.log('‚úÖ Contrato responde! Admin:', admin);
        
        // Testar getTotalRodadas (fun√ß√£o problem√°tica)
        try {
          const totalAtual = await publicClient.readContract({
            address: CONTRACTS.BINGO,
            abi: BINGO_ABI,
            functionName: 'getTotalRodadas',
          });
          console.log('‚úÖ getTotalRodadas atual:', totalAtual?.toString());
        } catch (totalError) {
          console.log('‚ö†Ô∏è getTotalRodadas falhou, mas vamos prosseguir:', totalError);
          // N√£o bloquear a cria√ß√£o da rodada por causa disto
        }
        
      } catch (testError: any) {
        console.error('‚ùå Contrato n√£o responde:', testError);
        toast({
          title: "‚ùå Contrato inacess√≠vel",
          description: "Verifique se a blockchain local est√° rodando.",
          variant: "destructive", 
        });
        return;
      }

      // ========================================
      // CONFIGURAR E ENVIAR TRANSA√á√ÉO
      // ========================================
      const { numeroMaximo, taxaEntrada, timeoutRodada, padroesVitoria } = DEFAULT_ROUND_CONFIG;
      
      console.log('üìã Par√¢metros da rodada:', {
        numeroMaximo,
        taxaEntrada: taxaEntrada.toString() + ' wei (' + (Number(taxaEntrada) / 1e18) + ' ETH)',
        timeoutRodada: timeoutRodada.toString() + ' segundos (' + (Number(timeoutRodada) / 3600) + ' horas)',
        padroesVitoria
      });

      toast({
        title: "üöÄ Criando rodada...",
        description: "Confirme na MetaMask e aguarde confirma√ß√£o.",
      });

      writeContract({
        address: CONTRACTS.BINGO,
        abi: BINGO_ABI,
        functionName: 'iniciarRodada',
        args: [numeroMaximo, taxaEntrada, timeoutRodada, padroesVitoria],
        gas: GAS_CONFIGS.INICIAR_RODADA.gas,
        gasPrice: GAS_CONFIGS.INICIAR_RODADA.gasPrice,
      });

    } catch (error: any) {
      console.error('‚ùå Erro ao iniciar rodada:', error);
      const { title, message } = formatErrorMessage(error);
      toast({ title, description: message, variant: "destructive" });
    }
  }, [gameState.isConnected, gameState.isCorrectNetwork, writeContract, toast]);

  // ========================================
  // FUN√á√ÉO CORRIGIDA: updateCurrentRound
  // ========================================
  const updateCurrentRound = useCallback(async () => {
    console.log('üîÑ Atualizando rodada atual ap√≥s confirma√ß√£o...');
    
    try {
      // Aguardar processamento da blockchain
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      console.log('üìä Tentando buscar total de rodadas...');
      
      // ========================================
      // ESTRAT√âGIA M√öLTIPLA PARA BUSCAR RODADAS
      // ========================================
      
      let totalRodadas: bigint | null = null;
      
      // Estrat√©gia 1: Tentar getTotalRodadas()
      try {
        totalRodadas = await publicClient.readContract({
          address: CONTRACTS.BINGO,
          abi: BINGO_ABI,
          functionName: 'getTotalRodadas',
        }) as bigint;
        console.log('‚úÖ Estrat√©gia 1 funcionou - getTotalRodadas():', totalRodadas.toString());
      } catch (strategy1Error) {
        console.log('‚ùå Estrat√©gia 1 falhou:', strategy1Error);
      }
      
      // Estrat√©gia 2: Se falhou, tentar buscar eventos de RodadaIniciada
      if (totalRodadas === null) {
        try {
          console.log('üîç Tentando estrat√©gia 2 - buscar eventos...');
          
          const currentBlock = await publicClient.getBlockNumber();
          const fromBlock = currentBlock > BigInt(100) ? currentBlock - BigInt(100) : BigInt(0);
          
          const logs = await publicClient.getLogs({
            address: CONTRACTS.BINGO,
            fromBlock: fromBlock,
            toBlock: 'latest',
          });
          
          console.log(`üìã Encontrados ${logs.length} eventos nos √∫ltimos blocos`);
          
          // Filtrar eventos RodadaIniciada e pegar o √∫ltimo ID
          const rodadaEvents = logs.filter(log => 
            log.topics[0] === '0x...' // Topic do evento RodadaIniciada - seria preciso calcular
          );
          
          if (rodadaEvents.length > 0) {
            // Extrair o √∫ltimo ID de rodada dos eventos
            const ultimoEvento = rodadaEvents[rodadaEvents.length - 1];
            const rodadaId = BigInt(ultimoEvento.topics[1] || '0');
            totalRodadas = rodadaId + BigInt(1); // Pr√≥ximo ID seria total
            console.log('‚úÖ Estrat√©gia 2 funcionou - √∫ltimo evento rodada:', rodadaId.toString());
          }
        } catch (strategy2Error) {
          console.log('‚ùå Estrat√©gia 2 falhou:', strategy2Error);
        }
      }
      
      // Estrat√©gia 3: Se tudo falhou, assumir que foi criada a rodada 0
      if (totalRodadas === null) {
        console.log('‚ö†Ô∏è Estrat√©gias falharam, assumindo rodada 0 foi criada');
        totalRodadas = BigInt(1); // Primeira rodada criada
      }
      
      // ========================================
      // ATUALIZAR ESTADO DA UI
      // ========================================
      if (totalRodadas && totalRodadas > 0) {
        const novaRodadaId = totalRodadas - BigInt(1); // ID da √∫ltima rodada criada
        console.log('üÜî Definindo rodada atual como:', novaRodadaId.toString());
        
        gameState.setCurrentRoundId(novaRodadaId);
        
        toast({
          title: "‚úÖ Rodada criada com sucesso!",
          description: `Rodada #${novaRodadaId.toString()} est√° ativa.`,
        });
      } else {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel determinar ID da rodada, mas transa√ß√£o confirmada');
        toast({
          title: "‚úÖ Transa√ß√£o confirmada",
          description: "Rodada criada, mas ID n√£o determinado. Recarregue a p√°gina.",
        });
      }
      
    } catch (error: any) {
      console.error('‚ùå Erro ao atualizar rodada atual:', error);
      // N√£o mostrar toast de erro - transa√ß√£o pode ter funcionado
      console.log('‚ö†Ô∏è Transa√ß√£o confirmada, mas falha ao buscar dados. Recarregue a p√°gina.');
    }
  }, [gameState, toast]);

  // ========================================
  // FUN√á√ÉO: handleDrawNumber
  // ========================================
  const handleDrawNumber = useCallback(async () => {
    console.log('üé≤ Sorteando n√∫mero...');
    
    try {
      if (!gameState.currentRoundId || gameState.currentRoundId === BigInt(0)) {
        toast({
          title: "‚ùå Nenhuma rodada ativa",
          description: "Inicie uma rodada primeiro.",
          variant: "destructive",
        });
        return;
      }

      writeContract({
        address: CONTRACTS.BINGO,
        abi: BINGO_ABI,
        functionName: 'sortearNumero',
        args: [gameState.currentRoundId],
        gas: GAS_CONFIGS.SORTEAR_NUMERO.gas,
        gasPrice: GAS_CONFIGS.SORTEAR_NUMERO.gasPrice,
      });

      toast({
        title: "üé≤ Sorteando n√∫mero...",
        description: "Transa√ß√£o enviada via Chainlink VRF.",
      });

    } catch (error: any) {
      console.error('‚ùå Erro ao sortear n√∫mero:', error);
      const { title, message } = formatErrorMessage(error);
      toast({ title, description: message, variant: "destructive" });
    }
  }, [gameState.currentRoundId, writeContract, toast]);

  // ========================================
  // RETORNO DO HOOK
  // ========================================
  return {
    // A√ß√µes principais
    handleStartRound,
    handleDrawNumber,
    updateCurrentRound,
    
    // Status das transa√ß√µes
    hash,
    isPending,
    isConfirming,
    isConfirmed,
    error,
    
    // Dados computados
    isLoading: isPending || isConfirming,
  };
}