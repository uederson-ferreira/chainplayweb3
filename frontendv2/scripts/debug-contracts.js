// Script para debugar conex√£o com contratos
// Salve como: debug-contracts.js na raiz do projeto

import { createPublicClient, http } from "viem";

// Carregar vari√°veis de ambiente
require("dotenv").config({ path: "../.env.local" });

const publicClient = createPublicClient({
  chain: {
    id: 31337,
    name: "Local Network",
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: { default: { http: ["http://127.0.0.1:8545"] } },
  },
  transport: process.env.NEXT_PUBLIC_RPC_URL,
});

const BINGO_ADDRESS = process.env.NEXT_PUBLIC_BINGO_CONTRACT_ADDRESS;
const CARTELA_ADDRESS = process.env.NEXT_PUBLIC_CARTELA_CONTRACT_ADDRESS;

// Verificar se as vari√°veis existem
if (!BINGO_ADDRESS || !CARTELA_ADDRESS) {
  console.error("‚ùå Endere√ßos dos contratos n√£o encontrados no .env");
  console.log(
    "Certifique-se de que NEXT_PUBLIC_BINGO_CONTRACT_ADDRESS e NEXT_PUBLIC_CARTELA_CONTRACT_ADDRESS est√£o definidos"
  );
  process.exit(1);
}

console.log("üìã Endere√ßos carregados do .env:");
console.log("üéØ BINGO:", BINGO_ADDRESS);
console.log("üé´ CARTELA:", CARTELA_ADDRESS);

async function debugContracts() {
  console.log("üîç DIAGN√ìSTICO DOS CONTRATOS");
  console.log("=".repeat(50));

  try {
    // 1. Verificar se a rede est√° acess√≠vel
    console.log("1Ô∏è‚É£ Testando conex√£o com a rede...");
    const blockNumber = await publicClient.getBlockNumber();
    console.log(`‚úÖ Conectado! Bloco atual: ${blockNumber}`);

    // 2. Verificar se h√° c√≥digo nos endere√ßos
    console.log("\n2Ô∏è‚É£ Verificando c√≥digos dos contratos...");

    const cartelaCode = await publicClient.getBytecode({
      address: CARTELA_ADDRESS,
    });
    console.log(`üìã Cartela (${CARTELA_ADDRESS}):`);
    console.log(
      `   C√≥digo: ${
        cartelaCode
          ? `${cartelaCode.slice(0, 20)}... (${cartelaCode.length} chars)`
          : "‚ùå SEM C√ìDIGO"
      }`
    );

    const bingoCode = await publicClient.getBytecode({
      address: BINGO_ADDRESS,
    });
    console.log(`üé≤ Bingo (${BINGO_ADDRESS}):`);
    console.log(
      `   C√≥digo: ${
        bingoCode
          ? `${bingoCode.slice(0, 20)}... (${bingoCode.length} chars)`
          : "‚ùå SEM C√ìDIGO"
      }`
    );

    // 3. Testar fun√ß√µes b√°sicas
    console.log("\n3Ô∏è‚É£ Testando fun√ß√µes b√°sicas...");

    if (cartelaCode) {
      try {
        // Testar precoBaseCartela (fun√ß√£o view simples)
        const precoBase = await publicClient.readContract({
          address: CARTELA_ADDRESS,
          abi: [
            {
              type: "function",
              name: "precoBaseCartela",
              inputs: [],
              outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
              stateMutability: "view",
            },
          ],
          functionName: "precoBaseCartela",
        });
        console.log(`‚úÖ precoBaseCartela: ${precoBase}`);
      } catch (error) {
        console.log(`‚ùå precoBaseCartela falhou: ${error.message}`);
      }

      try {
        // Testar feeCollector
        const feeCollector = await publicClient.readContract({
          address: CARTELA_ADDRESS,
          abi: [
            {
              type: "function",
              name: "feeCollector",
              inputs: [],
              outputs: [{ name: "", type: "address", internalType: "address" }],
              stateMutability: "view",
            },
          ],
          functionName: "feeCollector",
        });
        console.log(`‚úÖ feeCollector: ${feeCollector}`);
      } catch (error) {
        console.log(`‚ùå feeCollector falhou: ${error.message}`);
      }

      try {
        // Testar cartela ID 0 (deve falhar)
        const cartela0 = await publicClient.readContract({
          address: CARTELA_ADDRESS,
          abi: [
            {
              type: "function",
              name: "cartelas",
              inputs: [{ name: "", type: "uint256", internalType: "uint256" }],
              outputs: [
                { name: "id", type: "uint256", internalType: "uint256" },
                { name: "linhas", type: "uint8", internalType: "uint8" },
                { name: "colunas", type: "uint8", internalType: "uint8" },
                { name: "dono", type: "address", internalType: "address" },
                {
                  name: "numerosRegistrados",
                  type: "bool",
                  internalType: "bool",
                },
                { name: "emUso", type: "bool", internalType: "bool" },
                { name: "preco", type: "uint256", internalType: "uint256" },
              ],
              stateMutability: "view",
            },
          ],
          functionName: "cartelas",
          args: [BigInt(0)],
        });
        console.log(`‚úÖ cartela[0]: ${JSON.stringify(cartela0)}`);
      } catch (error) {
        console.log(`‚ùå cartela[0] falhou: ${error.message}`);
      }
    }

    // 4. Verificar eventos hist√≥ricos
    console.log("\n4Ô∏è‚É£ Verificando eventos...");
    if (cartelaCode) {
      try {
        const logs = await publicClient.getLogs({
          address: CARTELA_ADDRESS,
          fromBlock: BigInt(0),
          toBlock: "latest",
        });
        console.log(`üìã Total de eventos do contrato Cartela: ${logs.length}`);
        if (logs.length > 0) {
          console.log(
            `   Primeiro evento: Bloco ${logs[0].blockNumber}, Topics: ${logs[0].topics.length}`
          );
        }
      } catch (error) {
        console.log(`‚ùå Erro ao buscar eventos: ${error.message}`);
      }
    }

    // 5. Verificar saldo de accounts
    console.log("\n5Ô∏è‚É£ Verificando contas...");
    const accounts = [
      "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266", // Account 0 Anvil
      "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", // Account 1 Anvil
    ];

    for (const account of accounts) {
      try {
        const balance = await publicClient.getBalance({ address: account });
        console.log(`üí∞ ${account}: ${Number(balance) / 1e18} ETH`);
      } catch (error) {
        console.log(
          `‚ùå Erro ao verificar saldo de ${account}: ${error.message}`
        );
      }
    }
  } catch (error) {
    console.error("‚ùå ERRO GERAL:", error);
  }
}

// Executar diagn√≥stico
debugContracts();
