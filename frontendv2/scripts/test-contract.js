// ========================================
// SCRIPT DE DEBUG - test-contract.js
// ========================================
// Execute este script para testar o contrato diretamente

const { createPublicClient, http, getContract } = require("viem");

// Configura√ß√£o da rede local
const localChain = {
  id: 1,
  name: "Local Anvil Fork",
  nativeCurrency: {
    name: "Ether",
    symbol: "ETH",
    decimals: 18,
  },
  rpcUrls: {
    default: {
      http: ["http://127.0.0.1:8545"],
    },
  },
  testnet: true,
};

// Endere√ßos dos contratos (substitua pelos seus)
require("dotenv").config();
const CONTRACTS = {
  CARTELA: process.env.NEXT_PUBLIC_CARTELA_CONTRACT_ADDRESS,
  BINGO: process.env.NEXT_PUBLIC_BINGO_CONTRACT_ADDRESS,
};

// ABI simplificada para teste
const BINGO_ABI = [
  {
    type: "function",
    name: "admin",
    inputs: [],
    outputs: [{ name: "", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "operadores",
    inputs: [{ name: "", type: "address" }],
    outputs: [{ name: "", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "iniciarRodada",
    inputs: [
      { name: "_numeroMaximo", type: "uint8" },
      { name: "_taxaEntrada", type: "uint256" },
      { name: "_timeoutRodada", type: "uint256" },
      { name: "_padroesVitoria", type: "bool[]" },
    ],
    outputs: [{ name: "rodadaId", type: "uint256" }],
    stateMutability: "nonpayable",
  },
];

async function testContract() {
  console.log("üß™ INICIANDO TESTE DO CONTRATO");

  try {
    // Criar cliente p√∫blico
    const publicClient = createPublicClient({
      chain: localChain,
      transport: http(process.env.NEXT_PUBLIC_RPC_URL!),
    });

    console.log("‚úÖ Cliente criado");

    // ========================================
    // TESTE 1: VERIFICAR REDE
    // ========================================
    console.log("\nüì° TESTE 1: Verificando rede...");

    const blockNumber = await publicClient.getBlockNumber();
    console.log("üìã N√∫mero do bloco:", blockNumber.toString());

    const chainId = await publicClient.getChainId();
    console.log("üîó Chain ID:", chainId);

    // ========================================
    // TESTE 2: VERIFICAR CONTRATO CARTELA
    // ========================================
    console.log("\nüìã TESTE 2: Verificando contrato Cartela...");
    console.log("üìç Endere√ßo Cartela:", CONTRACTS.CARTELA);

    const cartelaCode = await publicClient.getBytecode({
      address: CONTRACTS.CARTELA,
    });

    if (cartelaCode) {
      console.log(
        "‚úÖ Contrato Cartela deployado (tamanho:",
        cartelaCode.length,
        ")"
      );
    } else {
      console.log("‚ùå Contrato Cartela N√ÉO encontrado!");
    }

    // ========================================
    // TESTE 3: VERIFICAR CONTRATO BINGO
    // ========================================
    console.log("\nüéØ TESTE 3: Verificando contrato Bingo...");
    console.log("üìç Endere√ßo Bingo:", CONTRACTS.BINGO);

    const bingoCode = await publicClient.getBytecode({
      address: CONTRACTS.BINGO,
    });

    if (bingoCode) {
      console.log(
        "‚úÖ Contrato Bingo deployado (tamanho:",
        bingoCode.length,
        ")"
      );
    } else {
      console.log("‚ùå Contrato Bingo N√ÉO encontrado!");
      return;
    }

    // ========================================
    // TESTE 4: CHAMADAS DE LEITURA
    // ========================================
    console.log("\nüìñ TESTE 4: Testando fun√ß√µes de leitura...");

    try {
      const admin = await publicClient.readContract({
        address: CONTRACTS.BINGO,
        abi: BINGO_ABI,
        functionName: "admin",
      });
      console.log("üëë Admin do contrato:", admin);
    } catch (error) {
      console.log("‚ùå Erro ao ler admin:", error.message);
    }

    // ========================================
    // TESTE 5: VERIFICAR OPERADORES
    // ========================================
    console.log("\nüîë TESTE 5: Verificando operadores...");

    // Endere√ßos comuns para testar
    const testAddresses = [
      "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266", // Anvil account #0
      "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", // Anvil account #1
      "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC", // Anvil account #2
    ];

    for (const testAddress of testAddresses) {
      try {
        const isOperator = await publicClient.readContract({
          address: CONTRACTS.BINGO,
          abi: BINGO_ABI,
          functionName: "operadores",
          args: [testAddress],
        });
        console.log(
          `üîë ${testAddress}: ${isOperator ? "√â OPERADOR" : "n√£o √© operador"}`
        );

        if (isOperator) {
          console.log("‚úÖ OPERADOR ENCONTRADO:", testAddress);
        }
      } catch (error) {
        console.log(`‚ùå Erro ao verificar ${testAddress}:`, error.message);
      }
    }

    // ========================================
    // TESTE 6: SIMULAR CHAMADA iniciarRodada
    // ========================================
    console.log("\nüéØ TESTE 6: Simulando iniciarRodada...");

    const numeroMaximo = 75;
    const taxaEntrada = BigInt("10000000000000000"); // 0.01 ETH em wei
    const timeoutRodada = BigInt(3600); // 1 hora
    const padroesVitoria = [true, true, true, false];

    console.log("üìã Par√¢metros:", {
      numeroMaximo,
      taxaEntrada: taxaEntrada.toString(),
      taxaEntradaETH: (Number(taxaEntrada) / 1e18).toFixed(4) + " ETH",
      timeoutRodada: timeoutRodada.toString(),
      padroesVitoria,
    });

    try {
      // Simular a chamada (n√£o vai executar, apenas validar)
      const simulacao = await publicClient.simulateContract({
        address: CONTRACTS.BINGO,
        abi: BINGO_ABI,
        functionName: "iniciarRodada",
        args: [numeroMaximo, taxaEntrada, timeoutRodada, padroesVitoria],
        account: testAddresses[0], // Usar primeira conta
      });

      console.log("‚úÖ Simula√ß√£o da chamada OK!");
      console.log("üìã Resultado esperado:", simulacao.result);
    } catch (error) {
      console.log("‚ùå Erro na simula√ß√£o:", error.message);

      if (error.message.includes("operador")) {
        console.log("üí° DICA: O erro indica que precisa ser operador");
      }
      if (error.message.includes("revert")) {
        console.log("üí° DICA: A transa√ß√£o est√° sendo rejeitada pelo contrato");
      }
    }

    console.log("\nüéâ TESTE CONCLU√çDO!");
  } catch (error) {
    console.error("‚ùå ERRO GERAL:", error);
  }
}

// ========================================
// EXECUTAR O TESTE
// ========================================
testContract()
  .then(() => {
    console.log("\n‚úÖ Script finalizado");
  })
  .catch((error) => {
    console.error("\n‚ùå Script falhou:", error);
  });

// ========================================
// INSTRU√á√ïES DE USO
// ========================================
/*
Para executar este script:

1. Salve como test-contract.js
2. Instale as depend√™ncias:
   npm install viem

3. Execute:
   node test-contract.js

4. Analise os resultados:
   - Verifique se os contratos est√£o deployados
   - Verifique qual endere√ßo √© operador
   - Use esse endere√ßo operador na MetaMask
*/
