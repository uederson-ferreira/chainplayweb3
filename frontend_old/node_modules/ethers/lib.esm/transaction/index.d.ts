/**
 *  Each state-changing operation on Ethereum requires a transaction.
 *
 *  @_section api/transaction:Transactions  [about-transactions]
 */
import type { BigNumberish } from "../../src.ts/utils/maths.ts";
import type { Signature, SignatureLike } from "../../src.ts/crypto/index.ts";
/**
 *  A single [[AccessList]] entry of storage keys (slots) for an address.
 */
export type AccessListEntry = {
    address: string;
    storageKeys: Array<string>;
};
/**
 *  An ordered collection of [[AccessList]] entries.
 */
export type AccessList = Array<AccessListEntry>;
/**
 *  Any ethers-supported access list structure.
 */
export type AccessListish = AccessList | Array<[string, Array<string>]> | Record<string, Array<string>>;
export interface Authorization {
    address: string;
    nonce: bigint;
    chainId: bigint;
    signature: Signature;
}
export type AuthorizationLike = {
    address: string;
    nonce: BigNumberish;
    chainId: BigNumberish;
    signature: SignatureLike;
};
export { accessListify } from "../../src.ts/transaction/accesslist.ts";
export { authorizationify } from "../../src.ts/transaction/authorization.ts";
export { computeAddress, recoverAddress } from "../../src.ts/transaction/address.ts";
export { Transaction } from "../../src.ts/transaction/transaction.ts";
export type { Blob, BlobLike, KzgLibrary, KzgLibraryLike, TransactionLike } from "../../src.ts/transaction/transaction.ts";
//# sourceMappingURL=index.d.ts.map